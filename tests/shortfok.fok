fokfetch = {
  enable = true;
  backend = "ascii";
  display = [
    "/================<{username}@{hostname}>================/"
    "OS: {os}"
    "Kernel: {kernel}"
    "CPU: {cpu}"
    "Uptime: {uptime}"
    "/================<{blank-username} {blank-hostname}>================/"
  ];
};



parsedisplay [] = " ";
parsedisplay (c:display) = c : "\n" : cursorToData : (parsedisplay display);

cursorToData = "\x1b[5C";

repeat chr 0 = "";
repeat chr n = chr:(repeat chr (n-1));

formatUptime x = (toString (x / 60)):"h, ":(toString (x % 60)):"m";

injectUser template = replace "{username}" (globals.user.username)
                        $ replace "{blank-username}" (repeat ' ' (length (globals.user.username)))
                        $ replace "{hostname}" (globals.user.hostname)
                        $ replace "{blank-hostname}" (repeat ' ' (length (globals.user.hostname))) template;


injectOS template = replace "{os}" (globals.os.prettyname)
                      $ replace "{kernel}" (globals.os.kernel)
                      $ replace "{uptime}" (formatUptime (toInt (head (split "." (globals.os.uptime)))) / 60) template;


injectHardware template = replace "{cpu}" (globals.hardware.cpu) template;



injectAll template = injectUser $ injectHardware $ injectOS template;

if (fokfetch.enable) {

  print cursorToData;
  println $ injectAll $ parsedisplay (fokfetch.display);
};
